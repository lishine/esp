from typing import Optional, Tuple, Union, Any

AF_INET: int
AF_INET6: int
SOCK_STREAM: int
SOCK_DGRAM: int
SOL_SOCKET: int
SO_REUSEADDR: int

class socket:
    def __init__(self, af: int = AF_INET, type: int = SOCK_STREAM, proto: int = 0) -> None: ...
    def bind(self, address: Tuple[str, int]) -> None: ...
    def listen(self, backlog: int = 0) -> None: ...
    def accept(self) -> Tuple['socket', Tuple[str, int]]: ...
    def connect(self, address: Tuple[str, int]) -> None: ...
    def send(self, bytes: Union[bytes, str]) -> int: ...
    def sendall(self, bytes: Union[bytes, str]) -> None: ...
    def recv(self, bufsize: int) -> bytes: ...
    def close(self) -> None: ...
    def settimeout(self, value: Optional[float]) -> None: ...
    def setblocking(self, flag: bool) -> None: ...
