#!/bin/bash
# ESP32 Device Management Script
# Simplifies interactions with ESP32 device

# Get the script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# AP IP address
AP_IP="192.168.4.1"

# Check if --ap flag is used
USE_AP_IP=false
for arg in "$@"; do
    if [ "$arg" == "--ap" ]; then
        USE_AP_IP=true
        break
    fi
done

# Read IP from file
if [ "$USE_AP_IP" = true ]; then
    ESP_IP="$AP_IP"
    echo "Using AP IP address: $ESP_IP"
elif [ -f "$SCRIPT_DIR/device/ip" ]; then
    ESP_IP=$(cat "$SCRIPT_DIR/device/ip")
else
    echo "Warning: IP file not found at $SCRIPT_DIR/device/ip"
    echo "Using AP IP address instead: $AP_IP"
    ESP_IP="$AP_IP"
fi

# Display usage information
show_usage() {
    echo "Usage: ./run [--ap] <command> [arguments]"
    echo ""
    echo "Options:"
    echo "  --ap                   - Use AP IP address (192.168.4.1) instead of configured IP"
    echo ""
    echo "Commands:"
    echo "  reset                  - Reset the ESP32 device"
    echo "  log                    - View device logs"
    echo "  la                     - List all files on the device"
    echo "  free                   - Show free memory on the device"
    echo "  ping                   - Check if the device is responding"
    echo "  rm <path>              - Remove a file from the device"
    echo "  download <path>        - Download a file from the device"
    echo "  view <path>            - View the contents of a file on the device"
    echo "  upload <file(s)> [target] - Upload one or more files (comma-separated) using upload_chunked.sh"
    echo "  sync                   - Upload all modified files in device/ directory"
    echo "  sync --dry-run         - Show which files would be uploaded without uploading"
    echo "  sync --force           - Force upload all files in device/ directory"
    echo ""
    echo "Examples:"
    echo "  ./run reset            - Reset the device"
    echo "  ./run --ap log         - View device logs using AP IP"
    echo "  ./run rm main.py       - Remove main.py from the device"
    echo "  ./run upload settings.html - Upload settings.html to the device"
    echo "  ./run upload main.py,config.txt - Upload multiple files"
    echo "  ./run upload main.py /app/ - Upload main.py to /app/ directory"
    echo "  ./run sync             - Upload all modified files"
}

# Helper function to make a curl request with timeout
# If the primary IP fails, it will try the AP IP if not already using it
make_request() {
    local url="$1"
    local method="${2:-GET}"
    local output_file="${3:-}"
    local timeout=3
    local curl_opts="-s -m $timeout"
    
    if [ -n "$output_file" ]; then
        curl_opts="$curl_opts -o $output_file"
    fi
    
    if [ "$method" != "GET" ]; then
        curl_opts="$curl_opts -X $method"
    fi
    
    # Try with the current IP
    local response
    if response=$(curl $curl_opts "$url" 2>&1); then
        echo "$response"
        return 0
    else
        # If using the primary IP and it failed, try with AP IP
        if [ "$USE_AP_IP" = false ] && [[ "$url" == http://$ESP_IP/* ]]; then
            echo "Connection to $ESP_IP timed out after ${timeout}s."
            echo "Trying AP IP address ($AP_IP) instead..."
            echo "Make sure you're connected to the ESP32's access point."
            
            # Replace the IP in the URL
            local ap_url="${url/$ESP_IP/$AP_IP}"
            
            if response=$(curl $curl_opts "$ap_url" 2>&1); then
                echo "$response"
                return 0
            else
                echo "Connection to AP IP ($AP_IP) also failed."
                return 1
            fi
        else
            echo "Connection failed: $response"
            return 1
        fi
    fi
}

# Check if a command was provided
if [ $# -lt 1 ]; then
    show_usage
    exit 1
fi

# Process arguments to filter out --ap
ARGS=()
for arg in "$@"; do
    if [ "$arg" != "--ap" ]; then
        ARGS+=("$arg")
    fi
done

COMMAND="${ARGS[0]}"
if [ ${#ARGS[@]} -gt 0 ]; then
    ARGS=("${ARGS[@]:1}")
fi

case "$COMMAND" in
  reset)
        echo "Resetting ESP32 at $ESP_IP..."
        make_request "http://$ESP_IP/reset" "POST"
        echo "Reset command sent."
        ;;
    
  log)
        echo "Fetching logs from ESP32 at $ESP_IP..."
        make_request "http://$ESP_IP/log"
        ;;
    
  la)
        echo "Listing all files on ESP32 at $ESP_IP..."
        make_request "http://$ESP_IP/la"
        ;;
    
  free)
        echo "Checking free memory on ESP32 at $ESP_IP..."
        make_request "http://$ESP_IP/free"
        ;;
        
  ping)
        echo "Pinging ESP32 at $ESP_IP..."
        make_request "http://$ESP_IP/ping"
        ;;
    
  rm)
        if [ ${#ARGS[@]} -lt 1 ]; then
            echo "Error: Missing file path"
            echo "Usage: ./run rm <path>"
            exit 1
        fi
        FILE_PATH="${ARGS[0]}"
        echo "Removing file $FILE_PATH from ESP32 at $ESP_IP..."
        make_request "http://$ESP_IP/rm/$FILE_PATH" "DELETE"
        ;;
    
  download)
        if [ ${#ARGS[@]} -lt 1 ]; then
            echo "Error: Missing file path"
            echo "Usage: ./run download <path>"
            exit 1
        fi
        FILE_PATH="${ARGS[0]}"
        echo "Downloading $FILE_PATH from ESP32 at $ESP_IP..."
        make_request "http://$ESP_IP/fs/get/$FILE_PATH" "GET" "$(basename "$FILE_PATH")"
        echo "Downloaded to $(basename "$FILE_PATH")"
        ;;
    
  view)
        if [ ${#ARGS[@]} -lt 1 ]; then
            echo "Error: Missing file path"
            echo "Usage: ./run view <path>"
            exit 1
        fi
        FILE_PATH="${ARGS[0]}"
        echo "Viewing file $FILE_PATH from ESP32 at $ESP_IP..."
        make_request "http://$ESP_IP/view/$FILE_PATH"
        ;;
    
  upload)
        if [ ${#ARGS[@]} -lt 1 ]; then
            echo "Error: Missing file path(s)"
            echo "Usage: ./run upload <file(s)> [target]"
            exit 1
        fi
        FILES="${ARGS[0]}"
        TARGET_PATH="${ARGS[1]:-}"

        # Convert comma-separated files into array
        IFS=',' read -r -a FILE_ARRAY <<< "$FILES"
        TOTAL_FILES=${#FILE_ARRAY[@]}
        
        # Flag to track if any .py files were uploaded
        PYTHON_FILES_UPLOADED=false
        
        for ((i=0; i<${#FILE_ARRAY[@]}; i++)); do
            FILE_PATH=$(echo "${FILE_ARRAY[$i]}" | xargs)  # Trim whitespace
            
            if [ ! -f "$FILE_PATH" ]; then
                echo "Error: File '$FILE_PATH' not found"
                continue
            fi

            # Check if this is a Python file
            if [[ "$FILE_PATH" == *.py ]]; then
                PYTHON_FILES_UPLOADED=true
            fi

            # Print separator with current file number
            echo "------$((i+1)) of $TOTAL_FILES---------"
            
            if [ -n "$TARGET_PATH" ]; then
                # If target path is specified
                echo "Uploading $FILE_PATH to ESP32 at $ESP_IP as $TARGET_PATH$(basename "$FILE_PATH")..."
                # Set environment variable for upload_chunked.sh to use the correct IP
                ESP_IP="$ESP_IP" "$SCRIPT_DIR/device/upload_chunked.sh" "$FILE_PATH" "$TARGET_PATH$(basename "$FILE_PATH")"
            else
                # If no target path
                echo "Uploading $FILE_PATH to ESP32 at $ESP_IP as $(basename "$FILE_PATH")..."
                # Set environment variable for upload_chunked.sh to use the correct IP
                ESP_IP="$ESP_IP" "$SCRIPT_DIR/device/upload_chunked.sh" "$FILE_PATH"
            fi
        done
        
        # Reset the device if any Python files were uploaded
        if [ "$PYTHON_FILES_UPLOADED" = true ]; then
            echo "Python files were uploaded. Resetting device..."
            "$0" reset
        fi
        ;;
  sync)
    TIMESTAMP_FILE="$SCRIPT_DIR/.last_sync"

    if [ ! -f "$TIMESTAMP_FILE" ]; then
      echo "Creating timestamp file: $TIMESTAMP_FILE"
      date +%s > "$TIMESTAMP_FILE"
    fi
    echo "Sync command called"

    DRY_RUN=false
    if [ ${#ARGS[@]} -gt 0 ] && [ "${ARGS[0]}" == "--dry-run" ]; then
      echo "Dry run mode: showing files that would be uploaded."
      DRY_RUN=true
      ARGS=("${ARGS[@]:1}")
    fi

    FORCE_UPLOAD=false
    if [ ${#ARGS[@]} -gt 0 ] && [ "${ARGS[0]}" == "--force" ]; then
      echo "Force upload mode: uploading all files."
      FORCE_UPLOAD=true
      ARGS=("${ARGS[@]:1}")
    fi

    # Get list of files to upload
    if [ "$FORCE_UPLOAD" == true ]; then
      # Get all files in device directory
      echo "Finding all files in device/ directory..."
      FILES=()
      while IFS= read -r -d '' file; do
        FILES+=("$file")
      done < <(find "$SCRIPT_DIR/device" -type f -print0)
    else
      # Get only modified files
      echo "Finding modified files since last sync..."
      FILES=()
      while IFS= read -r -d '' file; do
        FILES+=("$file")
      done < <(find "$SCRIPT_DIR/device" -type f -newer "$TIMESTAMP_FILE" -print0)
    fi

    # Check if any files were found
    if [ ${#FILES[@]} -eq 0 ]; then
      echo "No files to upload."
    else
      echo "Found ${#FILES[@]} files to upload."
      
      # Prepare comma-separated list of files
      FILE_LIST=""
      for file in "${FILES[@]}"; do
        if [ -z "$FILE_LIST" ]; then
          FILE_LIST="$file"
        else
          FILE_LIST="$FILE_LIST,$file"
        fi
      done
      
      # Upload all files at once using the upload command
      if [ "$DRY_RUN" == false ]; then
        echo "Uploading files using comma-separated list feature:"
        echo "$FILE_LIST"
        
        # Pass the --ap flag if it was used
        if [ "$USE_AP_IP" = true ]; then
          "$0" --ap upload "$FILE_LIST"
        else
          "$0" upload "$FILE_LIST"
        fi
        
        # Note: We don't need to explicitly reset here because the upload command
        # will already handle resetting if any .py files were uploaded
      else
        echo "Would upload these files (dry run):"
        echo "$FILE_LIST"
      fi
    fi

    # Update timestamp file
    if [ "$DRY_RUN" == false ]; then
      date +%s > "$TIMESTAMP_FILE"
      echo "Timestamp updated."
    fi
    ;;
  *)
    echo "Error: Unknown command '$COMMAND'"
    show_usage
    exit 1
    ;;
esac